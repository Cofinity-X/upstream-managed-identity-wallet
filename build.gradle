plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id "jacoco"
    id 'project-report'

    // used to download the 'dash.jar' for license checks
    // docs: https://github.com/michel-kraemer/gradle-download-task
    id "de.undercouch.download" version "5.5.0"

    // used to convert .env variables to gradle env variables
    // docs: https://github.com/uzzu/dotenv-gradle
    id "co.uzzu.dotenv.gradle" version "2.0.0"
}

group = "${groupName}"
version = "${applicationVersion}"
sourceCompatibility = JavaVersion.VERSION_17
// Fetch the environment variables GITHUB_USERNAME, GITHUB_TOKEN
// these can be set in <project_root>/.env
// or export GITHUB_USERNAME=...
//    export GITHUB_TOKEN=...
// When using `task ...` this is not necessary
githubUserName = "${githubUserName}" ? "${githubUserName}" : env.fetch('GITHUB_USERNAME')
githubToken = "${githubToken}" ? "${githubToken}" : env.fetch('GITHUB_TOKEN')

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://repo.danubetech.com/repository/maven-public")
    }
    maven { url 'https://jitpack.io' }
    maven {
        url = uri("https://maven.pkg.github.com/catenax-ng/product-lab-ssi")
        credentials {
            username = "${githubUserName}"
            password = "${githubToken}"
        }
    }
    maven {
        // Used to resolve Dash License Tool
        // Dash has a maven plugin, BUT is not resolvable through mavenCentral()
        url = uri("https://repo.eclipse.org/content/repositories/dash-licenses/")
    }
}

ext {

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation "org.springdoc:springdoc-openapi-starter-common:${openApiVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
    implementation group: 'com.smartsensesolutions', name: 'commons-dao', version: '0.0.5'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.eclipse.tractusx.ssi:cx-ssi-lib:0.0.16'

    //Added explicitly to mitigate CVE 2022-1471
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'

    //Added explicitly to mitigate CVE 2023-24998
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'


    testImplementation 'org.projectlombok:lombok:1.18.28'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers"
    testImplementation 'com.h2database:h2:2.2.220'
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation group: 'com.github.dasniko', name: 'testcontainers-keycloak', version: '2.5.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.json', name: 'json', version: '20230227'
    testImplementation group: 'com.github.curious-odd-man', name: 'rgxgen', version: '1.4'

}

tasks.register('dashDownload', Download) {
    description = 'Download the Dash License Tool standalone jar'
    group = 'License'
    src 'https://repo.eclipse.org/service/local/artifact/maven/redirect?r=dash-licenses&g=org.eclipse.dash&a=org.eclipse.dash.licenses&v=LATEST'
    dest layout.projectDirectory.file('dash.jar')
    // will not replace an existing file. If you know you need a new version
    // then manually delete the file yourself, or run `dashClean`
    overwrite false
}

// This task is primarily used by CIs
tasks.register('dashClean') {
    description = "Clean all files used by the 'License' group"
    group = 'License'
    logger.lifecycle("Removing 'dash.jar'")
    layout.projectDirectory.file('dash.jar').getAsFile().delete()
    logger.lifecycle("Removing 'deps.txt'")
    layout.projectDirectory.file('deps.txt').getAsFile().delete()
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom("org.testcontainers:testcontainers-bom:${testContainerVersion}")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

build {
    archivesBaseName = "miw"
    version = "latest"
}

// Usage: in the root of the project: ./gradlew -q dashDependencies
//
// Description: This task gathers all available configurations and their dependencies
// then filter anything belonging to 'org.eclipse' and outputs the dependencies, each on
// a new line.
tasks.register('dashDependencies') {
    doLast {
        def deps = []
        project.configurations.each { conf ->
            if (conf.canBeResolved) {
                deps.addAll(conf.incoming.resolutionResult.allDependencies.collect { dep ->
                    "${dep.selected}"
                })
            }
        }
        deps.findAll(d -> !d.startsWith('org.eclipse')).unique().sort().each { println it }
    }
}

bootJar {
    metaInf {
        from 'DEPENDENCIES'
        from 'SECURITY.md'
        from 'NOTICE.md'
        from 'LICENSE'
    }
}

test {
    finalizedBy jacocoTestReport
}

htmlDependencyReport {
    projects = project.allprojects
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"

}


jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                // disabled for now
                minimum = 0.00
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
